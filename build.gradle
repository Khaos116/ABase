buildscript {
  ext {
    vGradle = Versions.gradle
    vKotlin = Versions.kotlin
  }
}

plugins {
  id 'com.android.application' version "$vGradle" apply false
  id 'com.android.library' version "$vGradle" apply false
  id 'org.jetbrains.kotlin.android' version "$vKotlin" apply false
  id 'org.jetbrains.kotlin.jvm' version "$vKotlin" apply false
}

tasks.register('clean', Delete) {
  delete rootProject.buildDir
}

//监听任务
gradle.taskGraph.whenReady { graph ->
  def allTask = graph.getAllTasks()
  allTask.each { task ->
    def name = task.name
    if (name.contains("DebugAndroidTest")) {
      task.enabled = false
    } else if (name.contains("Debug")) {
      task.enabled = !name.contains("Lint") && !name.contains("Upload")
    }
  }
}

def isWindows = System.getProperty('os.name').toLowerCase().contains('win')

//释放内存
gradle.buildFinished {
  if (isWindows) { // 是windows编译环境
    boolean hasRun = false
    for (Task task in project.gradle.taskGraph.allTasks) {
      hasRun = task.name.toLowerCase().contains("assemble")
      if (hasRun) break
    }
    int seconds = 0
    if (hasRun) {
      seconds = 5
      System.in.println("5秒后释放java进程(${new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(System.currentTimeMillis())})")
    } else {
      System.in.println("立即释放java进程(${new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(System.currentTimeMillis())})")
    }
    new Thread() {
      @Override
      void run() {
        sleep(seconds * 1000)
        "taskkill /f /t /im java.exe".execute().text.trim()
      }
    }.start()
  }
}
