buildscript {
  ext {
    vGradle = Versions.gradle
    vKotlin = Versions.kotlin
  }
}

plugins {
  id 'com.android.application' version "$vGradle" apply false
  id 'com.android.library' version "$vGradle" apply false
  id 'org.jetbrains.kotlin.android' version "$vKotlin" apply false
  id 'org.jetbrains.kotlin.jvm' version "$vKotlin" apply false
}

tasks.register('clean', Delete) {
  delete rootProject.buildDir
}

//监听任务
gradle.taskGraph.whenReady { graph ->
  def allTask = graph.getAllTasks()
  allTask.each { task ->
    def name = task.name.toLowerCase()
    if (name.contains("debugandroidtest")) {
      task.enabled = false
    }
  }
  List<String> names = new ArrayList<>()
  def addTasks = allTask.findAll { task ->
    def name = task.name.toLowerCase()
    boolean add = name.startsWith("assemble") && !name.endsWith("test")
    if (add) System.err.println("开始Gradle任务：${task.path}")
    if (add && !names.contains(task.path)) names.add(task.path)
    add
  }
  addTasks.each { task ->
    task.doLast {
      System.err.println("已完成Gradle任务：${task.path}")
      names.remove(task.path)
      if (names.isEmpty()) killJavaAfterFinish()
    }
  }
}

//释放内存
static void killJavaAfterFinish() {
  System.err.println("Gradle任务已全部完成，20秒后释放java进程，${new Date().format("yyyy-MM-dd HH:mm:ss")}")
  new Thread() {
    @Override
    void run() {
      sleep(20 * 1000)
      System.err.println("开始执行释放java占用任务")
      String cmd = "taskkill /f /t /im java.exe"
      cmd.execute().text.trim()
    }
  }.start()
}
