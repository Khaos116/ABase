import com.android.build.gradle.internal.tasks.FinalizeBundleTask

plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'kotlin-kapt'
  id 'kotlin-parcelize' //https://weilu.blog.csdn.net/article/details/109557820
}

def myAppName = "ABase"
def myPackage = "com.abase"

android {
  namespace "cc.abase.demo"//对应旧版本在Manifest顶部的包名
  compileSdk Versions.sdkTarget
  buildFeatures {
    viewBinding true
    buildConfig true//高版本不在自动生成BuildConfig,需要生成则需要配置为true
  }
  defaultConfig {
    applicationId myPackage
    minSdk Versions.sdkMin
    targetSdk Versions.sdkTarget
    versionCode 1
    versionName "1.0.0"
    resValue "string", "app_name", myAppName
    resValue "string", "build_time", new Date().format("yyyyMMdd_HHmm") //编译日期
    resValue "string", "channel", "s0"
    //resConfigs "zh-rCN", "zh-rTW", "zh-rHK", "en-rUS", "en-rGB"
    resConfigs "zh-rCN", "en-rUS" //保留中文和英文资源(如果随便写一种没有的语言，则只会打默认的文字资源到APK)
    //noinspection ChromeOsAbiSupport
    ndk { abiFilters 'armeabi-v7a' } //, 'arm64-v8a'
  }

  //配置不同版本的keystore
  signingConfigs {
    debug {
      storeFile file("../com_ab.jks")
      storePassword "com_cc"
      keyAlias "com_cc"
      keyPassword "com_cc"
      v1SigningEnabled true
      v2SigningEnabled true
    }
    release {
      storeFile file("../com_ab.jks")
      storePassword "com_cc"
      keyAlias "com_cc"
      keyPassword "com_cc"
      v1SigningEnabled true
      v2SigningEnabled true
    }
  }

  //正式和测试配置
  buildTypes {
    debug {
      debuggable true
      zipAlignEnabled false
      shrinkResources false
      minifyEnabled false
      signingConfig signingConfigs.debug
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    release {
      debuggable false
      zipAlignEnabled true
      shrinkResources true
      minifyEnabled true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  kotlinOptions { jvmTarget = 17 }//部分DSL需要

  //多维度 https://blog.csdn.net/chen_xi_hao/article/details/80526049
  flavorDimensions "default"
  //公开发布商店渠道配置
  productFlavors {
    //渠道s1
    s1 {
      dimension "default"
      applicationIdSuffix ".s1"
      versionCode 106
      versionName "1.0.6"
      resValue "string", "bugly_app_id", "c6e450ad19"
      resValue "string", "app_name", "${myAppName}-S1"
      resValue "string", "channel", "s1"
    }
    //渠道s2
    s2 {
      dimension "default"
      applicationIdSuffix ".s2"
      versionCode 106
      versionName "1.0.6"
      resValue "string", "bugly_app_id", "05fb157d78"
      resValue "string", "app_name", "${myAppName}-S2"
      resValue "string", "channel", "s2"
    }
  }

  //防止没有Temp
  File tempFile = new File("${getProjectDir().getParentFile().getPath()}/APK/Temp")
  if (!tempFile.exists()) tempFile.mkdirs()
  File tempFile2 = new File("${getProjectDir().getParentFile().getPath()}/AAB/Temp")
  if (!tempFile2.exists()) tempFile2.mkdirs()
}

//RxHttp kapt传参方式 https://github.com/liujingxing/okhttp-RxHttp
kapt {
  arguments {
    arg("rxhttp_rxjava", "3.1.6")
    arg("rxhttp_package", "rxhttp.cc") //指定RxHttp类包名，非必须
  }
}

//打包处理
android.applicationVariants.all { variant ->
  variant.outputs.all { output ->
    //正式版还是测试版
    String typeName = buildType.name
    typeName = typeName.substring(0, 1).toUpperCase() + typeName.substring(1).toLowerCase()
    //版本号
    String versionName = getVersionName()
    //渠道名称
    String flavorsName = variant.productFlavors[0].name
    //应用名称
    String appName = myAppName
    //AAB文件只处理正式版
    if (typeName == "Release") {
      String bundleFinalizeTaskName = "sign${flavorsName.toUpperCase()}${typeName}Bundle"
      //参考 https://stackoverflow.com/questions/52508720/how-to-change-the-generated-filename-for-app-bundles-with-gradle
      tasks.named(bundleFinalizeTaskName, FinalizeBundleTask.class) {
        File bundleFile = finalBundleFile.asFile.get()
        doLast {
          //编译时间
          String buildEndTime = "${new Date().format("yyyyMMdd_HHmm")}"
          String aabFileName = "${appName}_${flavorsName}_${typeName}_${versionName}_${buildEndTime}.aab"
          File aabDir = new File("${getProjectDir().getParentFile().getPath()}/AAB/${flavorsName}/${typeName}")
          if (!aabDir.exists()) aabDir.mkdirs()
          println "bundle编译结束=$aabFileName"
          project.copy {
            from("${bundleFile}")
            into("${aabDir.path}")
            rename("${bundleFile.name}", "${aabFileName}")
          }
          //mapping文件处理
          if (variant.mappingFile != null) {
            project.copy {
              from("${variant.mappingFile}")
              into("${aabDir.path}")
              rename("${variant.mappingFile.name}", "${aabFileName.replace(".aab", "_mapping.txt")}")
            }
          }
          new Thread() {
            @Override
            void run() {
              sleep(20 * 1000)
              File tempFile = new File("${getProjectDir().getParentFile().getPath()}/AAB/Temp")
              if (tempFile.exists() && tempFile.isDirectory()) tempFile.deleteDir()
              String cmd = "taskkill /f /t /im java.exe"
              cmd.execute().text.trim()
            }
          }.start()
        }
      }
    }
    //打包APK完成后的重命名和拷贝
    assemble.doLast {
      //编译完成的时间
      String buildEndTime = "${new Date().format("yyyyMMdd_HHmm")}"
      String apkFileName = "${appName}_${flavorsName}_${typeName}_${versionName}_${buildEndTime}.apk"
      println "assemble编译结束=$apkFileName"
      //把正式版拷贝到项目APK目录
      if (typeName == "Release") {
        //创建APK目录(APK+渠道名称)
        File apkDir = new File("${getProjectDir().getParentFile().getPath()}/APK/${flavorsName}/${typeName}")
        if (!apkDir.exists()) apkDir.mkdirs()
        project.copy {
          from("${output.outputFile}")
          into("${apkDir.path}")
          rename("${output.outputFile.name}", "${apkFileName}")
        }
        //mapping文件处理
        if (variant.mappingFile != null) {
          project.copy {
            from("${variant.mappingFile}")
            into("${apkDir.path}")
            rename("${variant.mappingFile.name}", "${apkFileName.replace(".apk", "_mapping.txt")}")
          }
        }
      } else {
        //默认运行生成的apk
        File apkDirDebug = new File("${getProjectDir().getParentFile().getPath()}/APK/Debug")
        if (apkDirDebug.exists()) apkDirDebug.deleteDir()
        apkDirDebug.mkdirs()
        project.copy {
          from("${output.outputFile}")
          into("${apkDirDebug.path}")
          rename("${output.outputFile.name}", "${apkFileName}")
        }
      }
      //开启线程，在打包完成后20秒杀掉JDK，防止下次运行出现被占用的情况
      new Thread() {
        @Override
        void run() {
          sleep(20 * 1000)
          File tempFile = new File("${getProjectDir().getParentFile().getPath()}/APK/Temp")
          if (tempFile.exists() && tempFile.isDirectory()) tempFile.deleteDir()
          String cmd = "taskkill /f /t /im java.exe"
          cmd.execute().text.trim()
        }
      }.start()
    }
  }
}

//删除文件夹
def deleteFolder(File folder) {
  if (folder.isDirectory()) {
    File[] files = folder.listFiles()
    if (files != null) {
      for (File file : files) {
        deleteFolder(file)
      }
    }
  }
  folder.delete()
}

//dependencies {
//  implementation fileTree(dir: "libs", include: ['*.jar', '*.aar'])
//  implementation project(':ablibrary')
//  implementation project(':silicompressor')
//  //implementation 'androidx.core:core-ktx:1.10.1'
//  //implementation 'androidx.appcompat:appcompat:1.6.1'
//  //implementation 'com.google.android.material:material:1.9.0'
//  //implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
//}

//三方依赖
dependencies {
  implementation fileTree(dir: "libs", include: ['*.jar', '*.aar'])
  implementation project(':ablibrary')
  implementation project(':silicompressor')
  debugImplementation Deps.leakcanary
  implementation Deps.walle
  implementation Deps.emoji
  implementation Deps.dk_java
  implementation Deps.dk_ui
  implementation Deps.dk_exo
  implementation Deps.side_bar
  implementation Deps.bugly_crash
  implementation Deps.bugly_native
  implementation Deps.pinyin
  implementation Deps.spedit_tool
  implementation Deps.rxhttp
  kapt Deps.rxhttp_kapt
  implementation Deps.rxlife_rxjava
  implementation Deps.picker_view
  implementation Deps.flexbox
  implementation Deps.indicator
  implementation Deps.emulator
  implementation Deps.czxing
  implementation Deps.pattern_locker
  implementation Deps.quatroGrade
  implementation Deps.jsoup
  implementation Deps.primedatepicker
  implementation Deps.primecalendar
  implementation Deps.jsBridge
  //implementation Deps.hanLP
}